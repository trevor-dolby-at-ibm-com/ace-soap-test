package test;

import org.hamcrest.Matchers;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;

import com.ibm.integration.test.v1.NodeSpy;
import com.ibm.integration.test.v1.NodeStub;
import com.ibm.integration.test.v1.SpyObjectReference;
import com.ibm.integration.test.v1.TestMessageAssembly;
import com.ibm.integration.test.v1.TestSetup;
import com.ibm.integration.test.v1.exception.TestException;

import static com.ibm.integration.test.v1.Matchers.*;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.jupiter.api.Assertions.fail;

import java.io.InputStream;
import java.util.Map;

public class SOAPRequestApplication_MakeRequest_0002_Test {

	/*
	 * SOAPRequestApplication_MakeRequest_SOAP_Request_0001_Test
	 * Test generated by IBM App Connect Enterprise Toolkit 12.0.5.0 on Jun 28, 2022 3:18:41 PM
	 */

	@AfterEach
	public void cleanupTest() throws TestException {
		// Ensure any mocks created by a test are cleared after the test runs 
		TestSetup.restoreAllMocks();
	}

	@Test
	public void SOAPRequestApplication_MakeRequest_SOAP_Request_TestCase_001() throws TestException {

	    Map<String, String> env = System.getenv();

	    // Java 8
	    env.forEach((k, v) -> System.out.println(k + ":" + v));
	      
		// Define the SpyObjectReference
		SpyObjectReference nodeToBeMockedRef = new SpyObjectReference().application("SOAPRequestApplication")
				.messageFlow("MakeRequest").node("SOAP Request");

		// Define the SpyObjectReference objects
		SpyObjectReference httpInputObjRef = new SpyObjectReference().application("SOAPRequestApplication")
				.messageFlow("MakeRequest").node("HTTP Input");
		SpyObjectReference httpReplyObjRef = new SpyObjectReference().application("SOAPRequestApplication")
				.messageFlow("MakeRequest").node("HTTP Reply");

		// Initialise NodeSpy objects
		NodeSpy httpInputSpy = new NodeSpy(httpInputObjRef);
		NodeSpy httpReplySpy = new NodeSpy(httpReplyObjRef);

		// Declare a new TestMessageAssembly object for the message being sent into the node
		TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();
		
		// Initialize the service stub to avoid needing an API key for unit testing
		NodeStub serviceStub = new NodeStub(nodeToBeMockedRef);

		// Program the stub to return this dummy result instead of calling the service
		serviceStub.onCall().invokesCallableFlow("in", "out", "TestSupportApplication", "MockSOAPRequest");
		
		// Configure the "in" terminal on the HTTP Reply node not to propagate.
		// If we don't do this, then the reply node will throw exceptions when it  
		// realises we haven't actually used the HTTP transport.
		httpReplySpy.setStopAtInputTerminal("in");

		// Now call propagate on the "out" terminal of the HTTP Input node.
		// This takes the place of an actual HTTP message: we simple hand the node
		// the message assembly and tell it to propagate that as if it came from an
		// actual client. This line is where the flow is actually run.
		httpInputSpy.propagate(inputMessageAssembly, "out");
		
		// Validate the results from the flow execution
        // We will now pick up the message that is propagated into the "HttpReply" node and validate it
		TestMessageAssembly replyMessageAssembly = httpReplySpy.receivedMessageAssembly("in", 1);	}

}
